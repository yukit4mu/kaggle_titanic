# -*- coding: utf-8 -*-
"""FinalReport_titanic-source-code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E9yoKmeA8w3VZRDMC1irINnEw4k9o19M
"""

#　解説用コード
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.feature_selection import SelectKBest
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import cross_validate

# dataは、localからcolabのファイル内にインポートしたのち読み込み
train = pd.read_csv('./train.csv')
test = pd.read_csv('./test.csv')

test['Survived'] = np.nan
combined = pd.concat([train, test], ignore_index=True, sort=False)

combined.info()

sns.barplot(x='Sex', y='Survived', data=combined, palette='Set3')
plt.show()

age_data = combined[['Age', 'Pclass', 'Sex', 'Parch', 'SibSp']]
age_data = pd.get_dummies(age_data)

known_age = age_data[age_data.Age.notnull()].values
unknown_age = age_data[age_data.Age.isnull()].values

X_age = known_age[:, 1:]
y_age = known_age[:, 0]

rfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)
rfr.fit(X_age, y_age)

predicted_ages = rfr.predict(unknown_age[:, 1::])
combined.loc[(combined.Age.isnull()), 'Age'] = predicted_ages

facet = sns.FacetGrid(combined[0:890], hue="Survived", aspect=2)
facet.map(sns.kdeplot, 'Age', shade=True)
facet.set(xlim=(0, combined.loc[0:890, 'Age'].max()))
facet.add_legend()
plt.show()

combined['Title'] = combined['Name'].apply(lambda x: x.split(', ')[1].split('. ')[0])
title_mapping = {
    'Capt': 'Officer', 'Col': 'Officer', 'Major': 'Officer', 'Dr': 'Officer', 'Rev': 'Officer',
    'Don': 'Royalty', 'Sir': 'Royalty', 'the Countess': 'Royalty', 'Lady': 'Royalty', 'Dona': 'Royalty',
    'Mme': 'Mrs', 'Ms': 'Mrs', 'Mlle': 'Miss', 'Jonkheer': 'Master'
}
combined['Title'].replace(title_mapping, inplace=True)
sns.barplot(x='Title', y='Survived', data=combined, palette='Set3')

combined['Surname'] = combined['Name'].apply(lambda name: name.split(',')[0].strip())
combined['FamilyGroup'] = combined['Surname'].map(combined['Surname'].value_counts())

female_child_group = combined.loc[(combined['FamilyGroup'] >= 2) & ((combined['Age'] <= 16) | (combined['Sex'] == 'female'))]
female_child_group = female_child_group.groupby('Surname')['Survived'].mean()
print(female_child_group.value_counts())

male_adult_group = combined.loc[(combined['FamilyGroup'] >= 2) & (combined['Age'] > 16) & (combined['Sex'] == 'male')]
male_adult_list = male_adult_group.groupby('Surname')['Survived'].mean()
print(male_adult_list.value_counts())

dead_list = set(female_child_group[female_child_group.apply(lambda x: x == 0)].index)
survived_list = set(male_adult_list[male_adult_list.apply(lambda x: x == 1)].index)

combined.loc[(combined['Survived'].isnull()) & (combined['Surname'].apply(lambda x: x in dead_list)), ['Sex', 'Age', 'Title']] = ['male', 28.0, 'Mr']
combined.loc[(combined['Survived'].isnull()) & (combined['Surname'].apply(lambda x: x in survived_list)), ['Sex', 'Age', 'Title']] = ['female', 5.0, 'Mrs']

fare_median = combined.loc[(combined['Embarked'] == 'S') & (combined['Pclass'] == 3), 'Fare'].median()
combined['Fare'] = combined['Fare'].fillna(fare_median)

combined['Family'] = combined['SibSp'] + combined['Parch'] + 1
combined['Family_label'] = combined['Family']
combined.loc[(combined['Family'] >= 2) & (combined['Family'] <= 4), 'Family_label'] = 2
combined.loc[(combined['Family'] >= 5) & (combined['Family'] <= 7) | (combined['Family'] == 1), 'Family_label'] = 1
combined.loc[(combined['Family'] >= 8), 'Family_label'] = 0

ticket_count = dict(combined['Ticket'].value_counts())
combined['TicketGroup'] = combined['Ticket'].map(ticket_count)
sns.barplot(x='TicketGroup', y='Survived', data=combined, palette='Set3')
plt.show()

combined['Ticket_label'] = combined['TicketGroup']
combined.loc[(combined['TicketGroup'] >= 2) & (combined['TicketGroup'] <= 4), 'Ticket_label'] = 2
combined.loc[(combined['TicketGroup'] >= 5) & (combined['TicketGroup'] <= 8) | (combined['TicketGroup'] == 1), 'Ticket_label'] = 1
combined.loc[(combined['TicketGroup'] >= 11), 'Ticket_label'] = 0
sns.barplot(x='Ticket_label', y='Survived', data=combined, palette='Set3')
plt.show()

combined['Cabin'] = combined['Cabin'].fillna('Unknown')
combined['Cabin_label'] = combined['Cabin'].str.get(0)
sns.barplot(x='Cabin_label', y='Survived', data=combined, palette='Set3')
plt.show()

combined['Embarked'] = combined['Embarked'].fillna('S')

final_df = combined[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Title', 'Family_label', 'Cabin_label', 'Ticket_label']]
final_df = pd.get_dummies(final_df)

train_final = final_df[final_df['Survived'].notnull()]
test_final = final_df[final_df['Survived'].isnull()].drop('Survived', axis=1)

X_final = train_final.values[:, 1:]
y_final = train_final.values[:, 0]
test_X = test_final.values

select = SelectKBest(k=20)
clf = RandomForestClassifier(random_state=10, warm_start=True, n_estimators=26, max_depth=6, max_features='sqrt')
pipeline = make_pipeline(select, clf)
pipeline.fit(X_final, y_final)

cv_result = cross_validate(pipeline, X_final, y_final, cv=10)
print('mean_score =', np.mean(cv_result['test_score']))
print('mean_std =', np.std(cv_result['test_score']))

mask = select.get_support()
list_col = list(final_df.columns[1:])

for i, col_name in enumerate(list_col):
    print('No' + str(i + 1), col_name, '=', mask[i])

X_selected = select.transform(X_final)
print('X.shape={}, X_selected.shape={}'.format(X_final.shape, X_selected.shape))

predictions = pipeline.predict(test_X)
submission = pd.DataFrame({"PassengerId": test['PassengerId'], "Survived": predictions.astype(np.int32)})
submission.to_csv("my_submission.csv", index=False)

#　提出用コード
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.feature_selection import SelectKBest
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import cross_validate

# dataは、localからcolabのファイル内にインポートしたのち読み込み
train = pd.read_csv('./train.csv')
test = pd.read_csv('./test.csv')

test['Survived'] = np.nan
combined = pd.concat([train, test], ignore_index=True, sort=False)

sns.barplot(x='Sex', y='Survived', data=combined, palette='Set3')
plt.show()

age_data = combined[['Age', 'Pclass', 'Sex', 'Parch', 'SibSp']]
age_data = pd.get_dummies(age_data)

known_age = age_data[age_data.Age.notnull()].values
unknown_age = age_data[age_data.Age.isnull()].values

X_age = known_age[:, 1:]
y_age = known_age[:, 0]

rfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)
rfr.fit(X_age, y_age)

predicted_ages = rfr.predict(unknown_age[:, 1::])
combined.loc[(combined.Age.isnull()), 'Age'] = predicted_ages

facet = sns.FacetGrid(combined[0:890], hue="Survived", aspect=2)
facet.map(sns.kdeplot, 'Age', shade=True)
facet.set(xlim=(0, combined.loc[0:890, 'Age'].max()))
facet.add_legend()
plt.show()

combined['Title'] = combined['Name'].apply(lambda x: x.split(', ')[1].split('. ')[0])
title_mapping = {
    'Capt': 'Officer', 'Col': 'Officer', 'Major': 'Officer', 'Dr': 'Officer', 'Rev': 'Officer',
    'Don': 'Royalty', 'Sir': 'Royalty', 'the Countess': 'Royalty', 'Lady': 'Royalty', 'Dona': 'Royalty',
    'Mme': 'Mrs', 'Ms': 'Mrs', 'Mlle': 'Miss', 'Jonkheer': 'Master'
}
combined['Title'].replace(title_mapping, inplace=True)
sns.barplot(x='Title', y='Survived', data=combined, palette='Set3')

combined['Surname'] = combined['Name'].apply(lambda name: name.split(',')[0].strip())
combined['FamilyGroup'] = combined['Surname'].map(combined['Surname'].value_counts())

female_child_group = combined.loc[(combined['FamilyGroup'] >= 2) & ((combined['Age'] <= 16) | (combined['Sex'] == 'female'))]
female_child_group = female_child_group.groupby('Surname')['Survived'].mean()

male_adult_group = combined.loc[(combined['FamilyGroup'] >= 2) & (combined['Age'] > 16) & (combined['Sex'] == 'male')]
male_adult_list = male_adult_group.groupby('Surname')['Survived'].mean()

dead_list = set(female_child_group[female_child_group.apply(lambda x: x == 0)].index)
survived_list = set(male_adult_list[male_adult_list.apply(lambda x: x == 1)].index)

combined.loc[(combined['Survived'].isnull()) & (combined['Surname'].apply(lambda x: x in dead_list)), ['Sex', 'Age', 'Title']] = ['male', 28.0, 'Mr']
combined.loc[(combined['Survived'].isnull()) & (combined['Surname'].apply(lambda x: x in survived_list)), ['Sex', 'Age', 'Title']] = ['female', 5.0, 'Mrs']

fare_median = combined.loc[(combined['Embarked'] == 'S') & (combined['Pclass'] == 3), 'Fare'].median()
combined['Fare'] = combined['Fare'].fillna(fare_median)

combined['Family'] = combined['SibSp'] + combined['Parch'] + 1
combined['Family_label'] = combined['Family']
combined.loc[(combined['Family'] >= 2) & (combined['Family'] <= 4), 'Family_label'] = 2
combined.loc[(combined['Family'] >= 5) & (combined['Family'] <= 7) | (combined['Family'] == 1), 'Family_label'] = 1
combined.loc[(combined['Family'] >= 8), 'Family_label'] = 0

ticket_count = dict(combined['Ticket'].value_counts())
combined['TicketGroup'] = combined['Ticket'].map(ticket_count)
sns.barplot(x='TicketGroup', y='Survived', data=combined, palette='Set3')
plt.show()

combined['Ticket_label'] = combined['TicketGroup']
combined.loc[(combined['TicketGroup'] >= 2) & (combined['TicketGroup'] <= 4), 'Ticket_label'] = 2
combined.loc[(combined['TicketGroup'] >= 5) & (combined['TicketGroup'] <= 8) | (combined['TicketGroup'] == 1), 'Ticket_label'] = 1
combined.loc[(combined['TicketGroup'] >= 11), 'Ticket_label'] = 0
sns.barplot(x='Ticket_label', y='Survived', data=combined, palette='Set3')
plt.show()

combined['Cabin'] = combined['Cabin'].fillna('Unknown')
combined['Cabin_label'] = combined['Cabin'].str.get(0)
sns.barplot(x='Cabin_label', y='Survived', data=combined, palette='Set3')
plt.show()

combined['Embarked'] = combined['Embarked'].fillna('S')

final_df = combined[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Title', 'Family_label', 'Cabin_label', 'Ticket_label']]
final_df = pd.get_dummies(final_df)

train_final = final_df[final_df['Survived'].notnull()]
test_final = final_df[final_df['Survived'].isnull()].drop('Survived', axis=1)

X_final = train_final.values[:, 1:]
y_final = train_final.values[:, 0]
test_X = test_final.values

select = SelectKBest(k=20)
clf = RandomForestClassifier(random_state=10, warm_start=True, n_estimators=26, max_depth=6, max_features='sqrt')
pipeline = make_pipeline(select, clf)
pipeline.fit(X_final, y_final)

cv_result = cross_validate(pipeline, X_final, y_final, cv=10)
print('mean_score =', np.mean(cv_result['test_score']))
print('mean_std =', np.std(cv_result['test_score']))

mask = select.get_support()
list_col = list(final_df.columns[1:])

for i, col_name in enumerate(list_col):
    print('No' + str(i + 1), col_name, '=', mask[i])

X_selected = select.transform(X_final)
print('X.shape={}, X_selected.shape={}'.format(X_final.shape, X_selected.shape))

predictions = pipeline.predict(test_X)
submission = pd.DataFrame({"PassengerId": test['PassengerId'], "Survived": predictions.astype(np.int32)})
submission.to_csv("my_submission.csv", index=False)